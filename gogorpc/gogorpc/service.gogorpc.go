/*
 * Generated by protoc-gen-gogorpc. DO NOT EDIT!
 */

package gogorpc

import (
	context "context"
	channel "github.com/let-z-go/gogorpc/channel"
	proto "github.com/rpcx-ecosystem/rpcx-benchmark/proto"
)

const Hello = "example.Hello"

const (
	Hello_Say = "Say"
)

type HelloHandler interface {
	Say(ctx context.Context, request *proto.BenchmarkMessage) (response *proto.BenchmarkMessage, err error)
}

func RegisterHelloHandler(serviceHandler HelloHandler) func(*channel.Options) {
	return func(options *channel.Options) {
		options.
			BuildMethod(Hello, Hello_Say).
			SetRequestFactory(func() channel.Message {
				return new(proto.BenchmarkMessage)
			}).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := serviceHandler.Say(rpc.Ctx, rpc.Request.(*proto.BenchmarkMessage))

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End()
	}
}

type HelloStub struct {
	rpcPreparer      channel.RPCPreparer
	requestExtraData channel.ExtraData
}

func (self *HelloStub) Init(rpcPreparer channel.RPCPreparer) *HelloStub {
	self.rpcPreparer = rpcPreparer
	return self
}

func (self *HelloStub) WithRequestExtraData(extraData channel.ExtraData) *HelloStub {
	self.requestExtraData = extraData
	return self
}

func (self HelloStub) Say(ctx context.Context, request *proto.BenchmarkMessage) (*proto.BenchmarkMessage, error) {
	rpc := self.MakeSay(ctx, request).Do()
	response, err := rpc.Result()
	rpc.Close()
	return response, err
}

func (self HelloStub) MakeSay(ctx context.Context, request *proto.BenchmarkMessage) HelloStub_Say {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:              ctx,
		ServiceID:        Hello,
		MethodName:       Hello_Say,
		RequestExtraData: self.requestExtraData.Ref(true),
		Request:          request,
	}

	self.rpcPreparer.PrepareRPC(rpc, func() channel.Message {
		return new(proto.BenchmarkMessage)
	})

	return HelloStub_Say{rpc}
}

type HelloStub_Say struct {
	rpc *channel.RPC
}

func (self HelloStub_Say) WithRequestExtraData(extraData channel.ExtraDataRef) HelloStub_Say {
	self.rpc.RequestExtraData = extraData
	return self
}

func (self HelloStub_Say) Do() HelloStub_Say {
	if self.rpc.IsHandled() {
		self.rpc.Reprepare()
	}

	self.rpc.Handle()
	return self
}

func (self HelloStub_Say) Result() (*proto.BenchmarkMessage, error) {
	if self.rpc.Err != nil {
		return nil, self.rpc.Err
	}

	return self.rpc.Response.(*proto.BenchmarkMessage), nil
}

func (self HelloStub_Say) Close() {
	channel.PutPooledRPC(self.rpc)
	self.rpc = nil
}

func (self HelloStub_Say) RequestExtraData() channel.ExtraDataRef {
	return self.rpc.RequestExtraData
}

func (self HelloStub_Say) ResponseExtraData() channel.ExtraDataRef {
	return self.rpc.ResponseExtraData
}
