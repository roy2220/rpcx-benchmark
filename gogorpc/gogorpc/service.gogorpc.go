/*
 * Generated by protoc-gen-gogorpc. DO NOT EDIT!
 */

package gogorpc

import (
	context "context"
	channel "github.com/let-z-go/gogorpc/channel"
	proto "github.com/rpcx-ecosystem/rpcx-benchmark/proto"
)

const Hello = "example.Hello"

const (
	Hello_Say = "Say"
)

type HelloHandler interface {
	Say(ctx context.Context, request *proto.BenchmarkMessage) (response *proto.BenchmarkMessage, err error)
}

func RegisterHelloHandler(serviceHandler HelloHandler) func(*channel.Options) {
	return func(options *channel.Options) {
		options.
			BuildMethod(Hello, Hello_Say).
			SetRequestFactory(func() channel.Message {
				return new(proto.BenchmarkMessage)
			}).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := serviceHandler.Say(rpc.Ctx, rpc.Request.(*proto.BenchmarkMessage))

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End()
	}
}

type HelloStub struct {
	rpcPreparer channel.RPCPreparer
}

func (self HelloStub) Say(ctx context.Context, request *proto.BenchmarkMessage) *HelloStub_Say {
	rpc := HelloStub_Say{inner: channel.RPC{
		Ctx:        ctx,
		ServiceID:  Hello,
		MethodName: Hello_Say,
		Request:    request,
	}}

	self.rpcPreparer.PrepareRPC(&rpc.inner, func() channel.Message {
		return new(proto.BenchmarkMessage)
	})

	return &rpc
}

func MakeHelloStub(rpcPreparer channel.RPCPreparer) HelloStub {
	return HelloStub{rpcPreparer}
}

type HelloStub_Say struct {
	inner channel.RPC
}

func (self *HelloStub_Say) WithRequestMetadata(metadata channel.Metadata) *HelloStub_Say {
	self.inner.RequestMetadata = metadata
	return self
}

func (self *HelloStub_Say) Invoke() (*proto.BenchmarkMessage, error) {
	if self.inner.IsHandled() {
		self.inner.Reprepare()
	}

	self.inner.Handle()

	if self.inner.Err != nil {
		return nil, self.inner.Err
	}

	return self.inner.Response.(*proto.BenchmarkMessage), nil
}

func (self *HelloStub_Say) ResponseMetadata() channel.Metadata {
	return self.inner.ResponseMetadata
}
